name: monitoring

services:
  database:
    image: mysql:9.3.0
    pull_policy: if_not_present
    container_name: monitoring-database
    restart: unless-stopped
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: main
    volumes:
      - database-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping"]
      interval: 1s
      timeout: 20s
      retries: 30

  node-exporter:
    image: prom/node-exporter:v1.8.2
    pull_policy: if_not_present
    container_name: monitoring-exporter
    restart: unless-stopped
    env_file: .env
    command:
      - "--path.rootfs=/host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9100"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  uptime:
    image: louislam/uptime-kuma:1.23.16
    pull_policy: if_not_present
    container_name: monitoring-uptime
    restart: unless-stopped
    env_file: .env
    volumes:
     - ./uptime-data:/app/data
    ports:
     - ${UPTIME_PORT}:3001
    healthcheck:
      test: ["CMD", "extra/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  prometheus:
    image: prom/prometheus:v3.0.0
    pull_policy: if_not_present
    container_name: monitoring-prometheus
    restart: unless-stopped
    env_file: .env
    depends_on:
      node-exporter:
        condition: service_healthy
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  grafana:
    image: grafana/grafana-oss:11.3.1
    pull_policy: if_not_present
    container_name: monitoring-grafana
    restart: unless-stopped
    env_file: .env
    depends_on:
      prometheus:
        condition: service_healthy
    ports:
      - ${GRAFANA_PORT}:3000
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning/
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  bugsink:
    image: bugsink/bugsink:1.5.4
    pull_policy: if_not_present
    container_name: monitoring-bugsink
    restart: unless-stopped
    env_file: .env
    depends_on:
      database:
        condition: service_healthy
    ports:
      - ${BUGSINK_PORT}:8000
    environment:
      BEHIND_HTTPS_PROXY: True
      SECRET_KEY: ${BUGSINK_SECRET_KEY}
      CREATE_SUPERUSER: ${BUGSINK_SUPERUSER}
      PORT: ${BUGSINK_PORT}
      DATABASE_URL: mysql://root:${DATABASE_PASSWORD}@database:3306/main
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8000"]
      interval: 5s
      timeout: 20s
      retries: 10

  portainer:
    image: portainer/portainer-ce:2.30.0
    pull_policy: if_not_present
    container_name: monitoring-portainer
    restart: unless-stopped
    ports:
      - ${PORTAINER_PORT}:9443
    volumes:
      - portainer-data:/data
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  database-data:
  uptime-data:
  prometheus-data:
  grafana-data:
  portainer-data:
